import pandas as pd

# DataFrame() 함수로 데이터프레임 변환. 변수 df에 저장
exam_data = {'이름' : ['서준', '우현', '인아'],
             '수학' : ['90', '80', '70'],
             '영어' : ['98', '89', '95'],
             '음악' : ['85', '95', '100'],
             '체육' : ['100', '90', '90']}
df = pd.DataFrame(exam_data)

# '이름' 열을 새로운 인덱스로 지정하고, df 객체에 변경사항 반영
df.set_index('이름', inplace=True)
print(df)
print('\n')

# 데이터프레임 df의 특정 원소를 변경하는 방법: '서준'의 '체육' 점수

# =============================================================================
# df.iloc[0][3] = 80
# print(df)
# print('\n')
# SettingWithCopyWarning : 원본 데이터프레임이 아닌 사본 데이터프레임에서 작업을 하고 있을때 발생하는 경고
# 원인 : 체인 인덱싱을 사용해서 데이터프레임에 접근하면 원본 데이터프레임이 아닌 사본 데이터프레임에 접근하게 된다
# 해결법 : 체인 인덱싱으로 접근하는게 아니라 단일 작업으로 접근한다
# =============================================================================

df.iloc[0, 3] = 80
print(df)
print('\n')

# =============================================================================
# df.loc['서준']['체육'] = 90
# print(df)
# print('\n')
# df.iloc와 df.loc는 둘다 원본 데이터프레임을 반환해야 하고 
# df.iloc는 인덱스를 활용해 직접 원본 데이터프레임에 접근
# df.loc는 인덱스 레이블(식별자를 통해 접근하는 방식)을 사용
# 이라는 차이점이 있다
# =============================================================================
# =============================================================================
# df.loc['서준']['체육'] = 90
# 에러는 안 나지만 예기치 않은 결과 초래 가능
# =============================================================================
df.loc['서준', '체육'] = 100
print(df)

# 데이터프레임 df의 원소 여러 개를 변경하는 방법: '서준'의 '음악', '체육' 점수
df.loc['서준', ['음악', '체육']] = 50
print(df)
print('\n')

df.loc['서준', ['음악', '체육']] = 100, 50
print(df)